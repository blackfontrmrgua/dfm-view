@import "./_Defs.scss";



%FormGroup {

  display: flex;
  align-items: center;
  justify-content: space-evenly;

  margin: 2px;
  border: 1px solid rgba(255, 225, 154, 0.586);
  padding-block: 2px;
  padding-inline: 8px 2px;
  background-color: rgb(22, 18, 17, 0.5);

  border-radius: 20px;

  box-sizing: border-box;

  > .FormGroupName {
    font-weight: 900;
    text-align: center;
    flex-grow: 1;
    color: white;
    font-size: 0.9rem;
    cursor: default;
    line-height: 26px;
  }

  .FormGroupValue {
    flex-grow: 2;
  }

  input {
    padding: 0!important;
  }

}

.InputGroup {
  @extend %FormGroup;

  > input[type=number], > input[type=text] {
    text-align: center;
    font-size: 1em;
    border: none;
    background-color: transparent;
    min-height: 28px;
    box-sizing: border-box;
  }
}

.RadioGroup {
  @extend %FormGroup;


  > .RadioOne {
    > input[type=radio] {
      display: none;

      + label {
        flex-grow: 1;

        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;

        min-height: 28px;
        padding-inline: 5px;
        border-radius: 19px;
        box-sizing: border-box;
        border-width: 1px;
        border-style: solid;
        border-color: transparent;
        transition-property: color, border-color, background-color;
        transition-duration: 0.1s;
        transition-timing-function: linear;

        &:hover {
          border-color: rgba($color: #ffd67e, $alpha: 1.0);
        }
      }

      &:checked + label {
        background-color: rgb(255, 217, 92);
        color: black;
      }
    }
  }
}

.OneClickGroup {
  @extend %FormGroup;

  button {
    min-height: 28px;
    box-sizing: border-box;
    border-radius: 19px;
  }
}

.Duplex {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: auto;

}

.Quadplex {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-auto-rows: auto;
}

.OutputView {
  @extend %hovering-df;
}

:is(.InputGroup, .OutputView) {


  display: flex;
  align-items: center;
  justify-content: space-around;



  .Value {
    text-align: right;
    flex-grow: 1;
    font-size: 1.2rem;
    font-weight: bolder;
    color: #77bfff;
  }

}

.InputArea {
  display: flex;
  flex-direction: column;
  gap: 0.1rem;
}

.SlotHeading {
  display: flex;
  color: var(--color);
  font-size: 1.1rem;
  padding: 4px 8px;
}

.SkillIncCali {
  display: grid;
  gap: 0.5rem;
  grid-template-columns: 1fr 1fr 1fr;

  .DisposableInput {
    display: flex;

    input {
      flex-grow: 1;
    }
  }
}

%FramedIcon {

  --frame-offset: calc(var(--icon-size) * 3 / 80);
  --frame-size: calc(var(--icon-size) + var(--frame-offset) * 2);
  
  user-select: none;
  position: relative;

  width: var(--frame-size);
  height: var(--frame-size);

  img.IconImage {
    display: block;
    position: relative;
    width: var(--icon-size);
    left: var(--frame-offset);
    top: var(--frame-offset);
  }

  img.IconFrame {
    display: block;
    position: absolute;
    width: var(--frame-size);
    top: 0;
    left: 0;
  }
}

.ItemIcon {
  @extend %FramedIcon;
}

.ItemName {

  cursor: pointer;

  &.Rarity_Common {
    color: #{$Common-color};
  }

  &.Rarity_Uncommon {
    color: #{$Uncommon-color};
  }

  &.Rarity_Rare {
    color: #{$Rare-color};
  }

  &.Rarity_Unique {
    color: #{$Unique-color};
  }

  &.Rarity_Epic {
    color: #{$Epic-color};
  }

  &:hover {
    text-decoration: underline;
  }

}


.RoundIcon {
  @extend %FramedIcon;
  clip-path: circle(50%);
  
  img.IconImage {
    border-radius: 50%;
  }

}

.SwitchNotification {
  color: $Unique-color;
}